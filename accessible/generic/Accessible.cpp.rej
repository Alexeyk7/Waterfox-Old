--- accessible/generic/Accessible.cpp
+++ accessible/generic/Accessible.cpp
@@ -830,57 +830,60 @@
 
 nsresult
 Accessible::HandleAccEvent(AccEvent* aEvent)
 {
   NS_ENSURE_ARG_POINTER(aEvent);
 
   if (IPCAccessibilityActive() && Document()) {
     DocAccessibleChild* ipcDoc = mDoc->IPCDoc();
-    uint64_t id = aEvent->GetAccessible()->IsDoc() ? 0 :
-      reinterpret_cast<uintptr_t>(aEvent->GetAccessible());
-
-    switch(aEvent->GetEventType()) {
-      case nsIAccessibleEvent::EVENT_SHOW:
-        ipcDoc->ShowEvent(downcast_accEvent(aEvent));
-        break;
-
-      case nsIAccessibleEvent::EVENT_HIDE:
-        ipcDoc->SendHideEvent(id);
-        break;
-
-      case nsIAccessibleEvent::EVENT_REORDER:
-        // reorder events on the application acc aren't necessary to tell the parent
-        // about new top level documents.
-        if (!aEvent->GetAccessible()->IsApplication())
-          ipcDoc->SendEvent(id, aEvent->GetEventType());
-        break;
-      case nsIAccessibleEvent::EVENT_STATE_CHANGE: {
-                                                     AccStateChangeEvent* event = downcast_accEvent(aEvent);
-                                                     ipcDoc->SendStateChangeEvent(id, event->GetState(),
-                                                                                  event->IsStateEnabled());
-                                                     break;
-                                                   }
-      case nsIAccessibleEvent::EVENT_TEXT_CARET_MOVED: {
-                                                         AccCaretMoveEvent* event = downcast_accEvent(aEvent);
-                                                         ipcDoc->SendEvent(id, event->GetCaretOffset());
-                                                         break;
-                                                       }
-      case nsIAccessibleEvent::EVENT_TEXT_INSERTED:
-      case nsIAccessibleEvent::EVENT_TEXT_REMOVED: {
-        AccTextChangeEvent* event = downcast_accEvent(aEvent);
-        ipcDoc->SendTextChangeEvent(id, event->ModifiedText(),
-                                    event->GetStartOffset(),
-                                    event->GetLength(),
-                                    event->IsTextInserted(),
-                                    event->IsFromUserInput());
-        break;
-                                                   }
-      default:
-                                                       ipcDoc->SendEvent(id, aEvent->GetEventType());
+    MOZ_ASSERT(ipcDoc);
+    if (ipcDoc) {
+      uint64_t id = aEvent->GetAccessible()->IsDoc() ? 0 :
+        reinterpret_cast<uintptr_t>(aEvent->GetAccessible());
+
+      switch(aEvent->GetEventType()) {
+        case nsIAccessibleEvent::EVENT_SHOW:
+          ipcDoc->ShowEvent(downcast_accEvent(aEvent));
+          break;
+
+        case nsIAccessibleEvent::EVENT_HIDE:
+          ipcDoc->SendHideEvent(id);
+          break;
+
+        case nsIAccessibleEvent::EVENT_REORDER:
+          // reorder events on the application acc aren't necessary to tell the parent
+          // about new top level documents.
+          if (!aEvent->GetAccessible()->IsApplication())
+            ipcDoc->SendEvent(id, aEvent->GetEventType());
+          break;
+        case nsIAccessibleEvent::EVENT_STATE_CHANGE: {
+                                                       AccStateChangeEvent* event = downcast_accEvent(aEvent);
+                                                       ipcDoc->SendStateChangeEvent(id, event->GetState(),
+                                                                                    event->IsStateEnabled());
+                                                       break;
+                                                     }
+        case nsIAccessibleEvent::EVENT_TEXT_CARET_MOVED: {
+                                                           AccCaretMoveEvent* event = downcast_accEvent(aEvent);
+                                                           ipcDoc->SendEvent(id, event->GetCaretOffset());
+                                                           break;
+                                                         }
+        case nsIAccessibleEvent::EVENT_TEXT_INSERTED:
+        case nsIAccessibleEvent::EVENT_TEXT_REMOVED: {
+          AccTextChangeEvent* event = downcast_accEvent(aEvent);
+          ipcDoc->SendTextChangeEvent(id, event->ModifiedText(),
+                                      event->GetStartOffset(),
+                                      event->GetLength(),
+                                      event->IsTextInserted(),
+                                      event->IsFromUserInput());
+          break;
+                                                     }
+        default:
+                                                         ipcDoc->SendEvent(id, aEvent->GetEventType());
+      }
     }
   }
 
   nsCOMPtr<nsIObserverService> obsService = services::GetObserverService();
   NS_ENSURE_TRUE(obsService, NS_ERROR_FAILURE);
 
   nsCOMPtr<nsISimpleEnumerator> observers;
   obsService->EnumerateObservers(NS_ACCESSIBLE_EVENT_TOPIC,
